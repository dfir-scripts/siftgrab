#!/bin/bash
export TZ='Etc/UTC'
function read_me(){
echo "
##############################################################################################
siftgrab is an automated environment for running multiple open source forensic tools at once to examine Windows systems in a Linux evnironment.
Tested on Ubuntu, Kali, Windows WSL2 Ubuntu


Work flow
  Install:
  To install with all the dependencies and extra tools, download and run the forensics tools install script:
    wget https://raw.githubusercontent.com/dfir-scripts/installers/main/install-forensic-tools.sh
    sudo chmod 755 install-forensic-tools.sh
    sudo ./install-forensic-tools.sh

    # Directories created for disk mounting and evidence
       /mnt/raw
       /mnt/image_mount
       /mnt/vss
       /mnt/shadow
       /mnt/bde
       /mnt/smb
       /cases
       /opt/app/<open source tools directories>

  To access the siftgrab menu simply type: sudo siftgrab



  Disk Image Mounting:
    Mount disk images using the command "ermount" or using the siftgrab menu

    The script searches for Windows files in a given path
    (Point to a mounted disk or for data extracted from tools like KAPE)


  Process Artifacts:
    Use the menu to launch parsers

##############################################################################################
   siftgrab
********************************************************
 Mount and Extract Information From Windows Disk Images
********************************************************
**  1)  Mount a Disk or Disk Image (E01, Raw, AFF, QCOW VMDK, VHDX)
**  2)  Process Windows Artifacts from Mounted Image or Offline Directory
**  3)  Extract and Analyze Windows Event Logs
**  4)  Run Regiripper on a Mounted Volume or Offline Directory
**  5)  Acquire a Copy of Windows Forensic Artifacts from Mounted Image(s)
**  6)  Browse Files (lf)
**  7)  Read me

Select a menu option number or enter to exit.


siftgrab
Automated Processing of Artifacts:
##############################################################################################


Artifact,Tool,Source
------------------------------------------------------------------------------------------------------
usnjrln,usnparser,https://github.com/PoorBillionaire/USN-Journal-Parser
MFT,analyzeMFT,https://github.com/dkovar/analyzeMFT
MFT,mft_dump,https://github.com/omerbenamram/mft
Registry,Regripper,https://github.com/keydet89/RegRipper3.0
Registry,Yarp,https://github.com/msuhanov/yarp
Registry,registryFlush,https://github.com/Silv3rHorn/4n6_misc
LNK,JumpList_Lnk_Parser,https://github.com/salehmuhaysin/JumpList_Lnk_Parser
Jumplist,JumpList_Lnk_Parser,https://github.com/salehmuhaysin/JumpList_Lnk_Parser
amcache.hve,Regripper,https://github.com/keydet89/RegRipper3.0
Windows Prefetch,dfir-script,https://github.com/dfir-scripts/prefetchruncounts
Recycle.bin,dfir-script,https://github.com/dfir-scripts/
Chrome,dfir-script,https://github.com/dfir-scripts/
FireFox,dfir-script,https://github.com/dfir-scripts/
WebcacheV,esedbexport,https://github.com/libyal/libesedb
OBJECTS.DATA,PyWMIPersistenceFinder,https://github.com/davidpany/WMI_Forensics
OBJECTS.DATA,CCM_RUA_Finder,https://github.com/davidpany/WMI_Forensics
Srudb.dat,srumdump,https://github.com/MarkBaggett/srum-dump
current.mdb,kstrike,https://github.com/brimorlabs/KStrike
ActivitiesCache.db,windowstimeline,https://github.com/kacos2000/WindowsTimeline
index.dat,parseie,https://github.com/keydet89/Tools
AlternateDataStreams,dfir-script,https://github.com/dfir-scripts/
Windows Event Logs,evtx_dump,https://github.com/omerbenamram/evtx
Windows Event Logs,Zircolite,https://github.com/wagga40/Zircolite
Windows Event Logs,dfir-script,https://github.com/dfir-scripts/WinEventLogs


Triage Output:
By default extracted data goes to the /cases directory but can be directed to a network share are other locations
 Triage Output Directories:
    <Computer-Name>/Triage/
    ActivitiesCache
    Alert
    BITS
    Browser_Activity
    Current.mdb
    LNK
    MFT
    OBJECTS.DATA
    PowerShell
    Prefetch
    RDP
    Registry/Regripper
    Registry/Yarp-registryFlush
    ScheduledTasks
    SRUDB.dat
    Services
    Timeline
    USNJRNL
    WindowsEventLogs/evtx_dump


Additional Tools
----------------------------------------------------------------------------------------------------
log2timeline/plaso,https://github.com/log2timeline/plaso
Sleuthkit/Autopsy,https://www.sleuthkit.org/autopsy/
ftkimager,https://accessdata.com/product-download/debian-and-ubuntu-x64-3-1-1
Guymager,https://guymager.sourceforge.io/
ddrescue,https://www.gnu.org/software/ddrescue/
photorec/testdisk,https://www.cgsecurity.org/
Foremost,http://foremost.sourceforge.net/
dc3dd,https://sourceforge.net/projects/dc3dd/
xmount,https://www.pinguin.lu/xmount
afflib-tools,http://www.afflib.org/
exfatprogs,https://launchpad.net/ubuntu/+source/exfatprogs
qemu-utils,https://www.qemu.org/download/
ifuse,https://github.com/libimobiledevice/ifuse
gparted,https://gparted.org/
dfir_ntfs,https://github.com/msuhanov/dfir_ntfs
sqlite_miner,https://github.com/threeplanetssoftware
bulk_extractor,https://github.com/simsong/bulk_extractor
WFA 4/e Tools (Harlan Carvey),https://github.com/keydet89/Tools
jobparser,https://github.com/gleeda
bits_parser,https://github.com/ANSSI-FR/bits_parser
Hindsight,https://github.com/obsidianforensics/hindsight
INDXParse.py,https://github.com/williballenthin/INDXParse
feh,https://feh.finalrewind.org/
eog,https://help.gnome.org/users/eog/stable/
CyberChef,https://github.com/gchq/CyberChef
binwalk,https://github.com/ReFirmLabs/binwalk
graphviz,https://graphviz.org/
geoip-database,https://www.maxmind.com
Volatility3,https://github.com/volatilityfoundation/
Didier Stevens Suite,https://blog.didierstevens.com/didier-stevens-suite/
DEXRAY,https://www.hexacorn.com/products_and_freebies.html
iocextract,https://github.com/InQuest/python-iocextract
oletools,https://github.com/decalage2/oletools
pefile,https://github.com/erocarrera/pefile
Density Scout,https://cert.at/en/downloads/software/software-densityscout
clamav,https://www.clamav.net
ffmpeg,https://github.com/ffmpeg
lf,https://github.com/gokcehan/lf
jq,https://stedolan.github.io/jq/
yara,https://github.com/VirusTotal/yara
python3-impacket,https://github.com/SecureAuthCorp/impacket
hashcat,https://github.com/hashcat
python-evtx,python-registry,https://github.com/williballenthin/
python3-libesedb,https://github.com/libyal
libesedb-utils,https://github.com/libyal
liblnk-utils,https://github.com/libyal
libevtx-utils,https://github.com/libyal
libewf-dev,https://github.com/libyal
ewf-tools/libewf-tools,https://github.com/libyal
libbde-utils/tools,https://github.com/libyal
libvshadow-utils/tools,https://github.com/libyal
pff-tools,https://github.com/libyal
libscca-python,https://github.com/libyal
liblnk-python,https://github.com/libyal
libfwsi-python,https://github.com/libyal
p7zip-full,https://www.7-zip.org

# Yara Rules (fetch using get-yara-rules.sh)
https://github.com/Neo23x0/signature-base
https://github.com/bartblaze/Yara-rules
https://github.com/Yara-Rules
https://github.com/reversinglabs/reversinglabs-yara-rules
##############################################################################################

"
}
#Function to produce Red Text Color
function makered() {
    COLOR='\033[01;31m' # bold red
    RESET='\033[00;00m' # normal white
    MESSAGE=${@:-"${RESET}Error: No message passed"}
    echo -e "${COLOR}${MESSAGE}${RESET}"
}
#Function to produce Green Text Color
function makegreen() {
    COLOR='\033[0;32m' # Green
    RESET='\033[00;00m' # normal white
    MESSAGE=${@:-"${RESET}Error: No message passed"}
    echo -e "${COLOR}${MESSAGE}${RESET}"
}
# reusable interactive yes-no function
function yes-no(){
      read -p "(Y/N)?"
      [ "$(echo $REPLY | tr [:upper:] [:lower:])" == "y" ] &&  yes_no="yes";
}
##  Main dfir-scripts Display Menu Function
echo ""
function show_menu(){
    GRAY=`echo "\033[0;37m"`
    GREEN=`echo "\033[0;32m"`
    NORMAL=`echo "\033[m"`
    RED=`echo "\033[31m"`
    echo -e "${GREEN} dfir-scripts${NORMAL}"
    echo -e "********************************************************"
    echo -e "${GRAY} Mount and Extract Information From Windows Disk Images${NORMAL}"
    echo -e "********************************************************"
    echo -e "**  1) ${GREEN} Mount a Disk or Disk Image (E01, Raw, AFF, QCOW VMDK, VHDX)${NORMAL}"
    echo -e "**  2)${GREEN}  Run a Comprehensive Analysis of Windows Artifacts on a Mounted Image or Directory${NORMAL}"
    echo -e "**  3)${GREEN}  Analyze Windows Event Logs (evtx_dump, Zircolite and custom scripts)${NORMAL}"
    echo -e "**  4) ${GREEN} Run Registry Analysis tools (Regripper, Yarp + RegistryFlush, Secretsdump, timeline.py)${NORMAL}"
    echo -e "**  5) ${GREEN} Acquire a Copy of Windows Forensic Artifacts from Mounted Image(s)${NORMAL}"
    echo -e "**  6) ${GREEN} Browse Files (lf)${NORMAL}"
    echo -e "**  7) ${GREEN} Read me${NORMAL}"
    echo ""
    echo -e "Select a menu option number or ${RED}enter to exit. ${NORMAL}"
    read opt
while [ opt != '' ]
    do
    if [[ $opt = "" ]]; then
            exit;
    else
        case $opt in
        #Menu Selection: Mount disk image to $mount_dir
        1) clear
           /usr/local/bin/ermount -h
           read -n1 -r -p "Press any key to continue ermount..." key
           /usr/local/bin/ermount
            show_menu;
            ;;

        #Menu Selection: Process Artifacts Collected using RegRipper and other Tools
        2) clear;
           makegreen "Process Artifacts for Triage"
           set_msource_path
           set_windir
           get_computer_name
           set_dsource_path
           check_dsource_path
           create_triage_dir
           get_usnjrlnsize
           get_evtxsize
           source /envs/dfir/bin/activate
           repair_hives
           JLParser
           lnkinfo
           regrip_software
           rip_system
           rip_security
           regrip_ntuser_usrclass
           regrip_user_plugins
           regrip_sam
           regrip_amcache.hve
           secrets_dump
           timeline_registry
           prefetch_extract
           extract_objects_data
           extract_Jobs
           del_no_result
           recbin2tln
           chrome2tln
           firefox2tln
           cp_artifacts
           extract_webcacheV
           winservices
           #extract_srudb
           parse_current.mdb
           bits_parser
           evtxdump
           extract_WinEVTX
           zircolite_evtx
           analyze_mft
           ADS_extract
           consolidate_timeline
           extract_winactivities
           ls /$mount_dir/Users/*/AppData/Local/Microsoft/Windows/WebCache 2>/dev/null || parse_index.dat
           scan_for_lolbas
           [ "$usn" ] && parse_usn
           #Clean-up
           deactivate
           find $case_dir -empty -delete
           makegreen "Removing Duplicates..."
           echo "Please Wait..."
           fdupes -rdN $case_dir
           makegreen "The Processed Artifacts are Located in $triage_dir"
           du -sh $triage_dir
           makegreen Process Complete!
           read -n1 -r -p "Press any key to continue..." key
           show_menu;
            ;;
        #Menu Selection: Extract Windows Event Log to jsonl
        3) clear;
           makegreen "Analyze Windows Event Logs (evtx_dump, Zircolite and custom scripts)"
           makegreen "Default Source Directory: Windows/System32/winevt/Logs"
           set_msource_path
           set_windir
           set_dsource_path
           #timeline_dir="$/Timeline"
           get_evtxsize
           makered "Exporting Windows Event Logs to jsonl"
           extract_WinEVTX
           evtxdump
           read -n1 -r -p "Press any key to continue..." key
           clear
           show_menu;
            ;;
        #Menu Selection: Run Regripper on a mounted volume or data source
        4) clear;
           makegreen "Run Registry Analysis tools (Regripper, Yarp + RegistryFlush, Secretsdump, timeline.py)"
           set_msource_path
           set_windir
           get_computer_name
           set_dsource_path
           check_dsource_path		   
           /opt/app/dfir-scripts/shellscripts/regripperall.sh $mount_dir
           /envs/dfir/bin/python /usr/share/doc/python3-impacket/examples/secretsdump.py -sam $sam_hive -system $system_hive -security $security_hive local |tee -a $case_dir/Secretsdump.txt
           timeline_dir=$case_dir/Timeline
		   timeline_registry
           read -n1 -r -p "Press any key to continue..." key
           clear;
           show_menu;
            ;;
        #Menu Selection:  Acquire Data from Mounted Disks or Image Excerpts
        5) clear;
           /opt/app/dfir-scripts/shellscripts/grab-winfiles.sh
           read -n1 -r -p "Press any key to continue..." key
           clear;
           show_menu;
            ;;
        #Menu Selection:Lf File Browser
        6) clear;
           cd /cases
           lf
           clear;
           show_menu;
            ;;
        #Menu Selection:dfir-scripts Readme and Tools
        7) clear;
           cd /opt/share
           read_me
           read -n1 -r -p "Press any key to return to menu..." key
           show_menu;
            ;;
        x)exit;
        ;;
        \n)clear;
           exit;
        ;;
        *)clear;
        makered "Pick an option from the menu";
        show_menu;
        ;;
    esac
fi
done
}

####### DATA ACQUISITION AND PROCESSING PREFERENCES #######

# Set Data Source or mount point
function set_msource_path(){
      echo ""
      makered "SET DATA SOURCE"
      echo "Set Path or Enter to Accept Default:"
      read -e -p "" -i "/mnt/image_mount/" mount_dir
      [ ! -d "${mount_dir}" ] && makered "Path does not exist.." && sleep 1 && exit
      mount_dir=$(echo $mount_dir |sed 's_.*_&\/_'|sed 's|//*|/|g')
      echo "Data Source =>" $mount_dir
}

# Set Case Destination Folder (Default = /cases/)
function set_dsource_path(){
      makered "SET CASE DESTINATION FOLDER (Default = /cases/)"
      echo "Set Path or Enter to Accept:"
      read -e -p "" -i "/cases/" case_dir
      [ ! -d "${case_dir}" ] && makered "Path does not exist.." && sleep 2 && show_menu
      cd $case_dir
      [ ! -d "${case_dir}" ] && makered "Path does not exist.." && sleep 1 && show_menu
      case_dir="$case_dir/$comp_name"
      triage_dir="$case_dir/Triage"
      timeline_dir="$triage_dir/Timeline"
      artifact_dir="$case_dir/Artifact"
}
function check_dsource_path(){
      [ -d "$triage_dir" ] && echo "$case_dir already exists! overwrite?" && yes-no && rm -r $triage_dir/ && quit="no"
      [ -d "$triage_dir" ] && [ "$quit" != "no" ] && exit
      mkdir -p $triage_dir
      mkdir -p $artifact_dir
      echo "Case Folder =>  $case_dir"
}

#Find "Windows" directory paths
function set_windir(){
      cd $mount_dir
      windir=$(find $mount_dir -maxdepth 1 -type d 2>/dev/null|egrep -m1 -io windows$)
      winsysdir=$(find $mount_dir/$windir -maxdepth 1 -type d 2>/dev/null|egrep -m1 -io windows\/system32$)
      user_dir=$(find $mount_dir -maxdepth 1 -type d 2>/dev/null|grep -m1 -io users$)
      regdir=$(find $mount_dir/$winsysdir -maxdepth 1 -type d 2>/dev/null|egrep -m1 -io \/config$)
      evtxdir=$(find $mount_dir/$winsysdir -maxdepth 2 -type d 2>/dev/null|egrep -m1 -io \/winevt\/Logs$)
      sam_hive=$(find $mount_dir/$winsysdir/$regdir -maxdepth 1 -type f 2>/dev/null | grep -i -m1 "\/sam$")
      system_hive=$(find $mount_dir/$winsysdir/$regdir -maxdepth 1 -type f 2>/dev/null | grep -i -m1 "\/system$")
      security_hive=$(find $mount_dir/$winsysdir/$regdir -maxdepth 1 -type f 2>/dev/null | grep -i -m1 "\/security$")
      software_hive=$(find $mount_dir/$winsysdir/$regdir -maxdepth 1 -type f 2>/dev/null | grep -i -m1 "\/software$")
      amcache_hive=$(find $mount_dir/$windir/[a,A]*/[P,p]* -maxdepth 1 -type f |egrep -m1 -i \/amcache.hve$)
      registry_hives=("$sam_hive" "$system_hive" "$security_hive" "$software_hive" "$amcache_hive")
      [ "$windir" == "" ] || [ "$winsysdir" == "" ] && files_only="yes"
      [ "$opt" == "2" ] || [ "$opt" == "5" ] || [ "$opt" == "6" ] && [ "$files_only" == "yes" ] && \
      makered "No Windows Directory Path Found on Source..." && sleep 2 && show_menu
      [ "$winsysdir" != "" ] && echo "Windows System32 Directory => $mount_dir$winsysdir"
      [ "$regdir" != "" ] && echo  "Registry Directory =>" $mount_dir$winsysdir$regdir
      [ "$evtxdir" != "" ] && echo  "Windows Eventlog Directory =>" $mount_dir$winsysdir$evtxdir
}

#Get Computer Name using Regripper's "comp_name" plugin
function get_computer_name(){
   [ "$comp_name" == "" ] &&  \
   comp_name=$(rip.pl -r "$system_hive" -p compname 2>/dev/null |grep -i "computername   "|awk -F'= ' '{ print $2 }')
   [ "$comp_name" == "" ] && comp_name=$(date +'%Y-%m-%d-%H%M')
   echo "ComputerName:" $comp_name
   #cleanup and create a new new temp file to hold regripper output
   rm /tmp/$comp_name.* 2>/dev/null
   tempfile=$(mktemp /tmp/$comp_name.XXXXXXXX)
}

#Create Output Directory
function create_triage_dir(){
triage_dirs=("ActivitiesCache" "Alert" "BITS" "Browser_Activity" "Current.mdb" "LNK" "MFT" "OBJECTS.DATA" "PowerShell" "Prefetch" "RDP" "Registry/Regripper/Account_Info" "Registry/Regripper/File_Access" "Registry/Regripper/Program_Execution" "Registry/Regripper/Run_Keys" "Registry/Regripper/Settings" "Registry/Regripper/System_Info/Network" "Registry/Regripper/System_Info/Software" "USB" "Registry/Regripper/USERS" "Registry/Regripper/User_Searches" "Registry/yarp-registryflush.py" "Registry/Impacket" "Logs" "ScheduledTasks" "Services" "SRUDB.dat" "Timeline" "USNJRNL" "WindowsEventLogs" "lolbas")
    for dir_names in "${triage_dirs[@]}";
    do
      mkdir -p $triage_dir/$dir_names
    done
}

##############ACQUISITION FUNCTIONS############################

#Check Size of Windows Logs and option to include in backup
function get_logsize(){
    cd $mount_dir
    find -maxdepth 1 -type d  -iname "inetpub"|while read d;
    do
      du -sh $d
    done
    find $winsysdir -maxdepth 2 -type d -iname "LogFiles"|while read d;
    do
      du -sh $d
    done
    makered "COPY WINDOWS LOGFILES?" && yes-no && get_logs="yes"
}

#Check USNJRNL Size and option to include in backup
function get_usnjrlnsize(){
    cd $mount_dir
    du -sh \$Extend/\$UsnJrnl:\$J 2>/dev/null
    makered "PROCESS \$USNJRNL File?"
    yes-no && usn="yes"
}

#Check Windows Event Logs Size
function get_evtxsize(){
    cd $mount_dir
    du -sh $mount_dir/$winsysdir/$evtxdir && \
    $mount_dir/$winsysdir/$evtxdir -size +500M -printf "%s bytes\t%p\n" 2>/dev/null|sort| grep . && \
    makered "There are some event logs larger than 500M... This could take a long time. Do you want to extract them?" && \
    yes-no || evtx_max="-size -500M"
}

#Copy Windows Journal file: USNJRNL:$J
function get_usnjrnl(){
    makegreen "Copying \$LogFile and  \$UsnJrnl:\$J"
    echo "#### USNJRNL ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    tar -Prvf $case_dir/$comp_name-acquisition.tar \$Extend/\$UsnJrnl:\$J | tee -a  $case_dir/Acquisition.log.txt
    echo ""
    tar -Prvf $case_dir/$comp_name-acquisition.tar \$LogFile | tee -a  $case_dir/Acquisition.log.txt
    echo ""
}

#Copy $MFT
function get_mft(){
    makegreen "Saving \$MFT "
    echo "#### MFT ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    echo $mount_dir
    tar -Prvf $case_dir/$comp_name-acquisition.tar \$MFT |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Windows Event Logs
function get_evtx(){
    makegreen "Saving Windows Event Logs"
    echo "#### Windows Event Logs ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $winsysdir/[W,w]inevt/[L,l]ogs -type f 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Windows Registry Files
function get_registry(){
    cd $mount_dir
    makegreen "Saving Windows Registry"
    echo "#### Windows Registry ####" >> $case_dir/Acquisition.log.txt
    find $winsysdir/[C,c]onfig -type f  2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy User profile registry hives (NTUSER.DAT)
function get_ntuser(){
    makegreen "Saving NTUSER.DAT"
    echo "#### NTUSER.DAT ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $user_dir -maxdepth 2 -mindepth 2 -type f -iname "ntuser.dat" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Userclass.dat files
function get_usrclass.dat(){
    makegreen "Saving usrclass.dat"
    echo "#### USRCLASS.DAT ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $user_dir/*/AppData/Local/Microsoft/Windows -maxdepth 2 -type f -iname "UsrClass.dat" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T -  |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy LNK and Jumplist file
function get_lnk_files(){
    makegreen "Saving LNK Files"
    echo "#### LNK AND JUMPLISTS ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $user_dir/*/AppData/Roaming/Microsoft/Windows/Recent -type f 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T -  |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Prefetch files
function get_prefetch(){
    makegreen "Saving Windows Prefetch"
    echo "#### PREFETCH ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $windir/[P,p]refetch  2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Amcache.hve and recentfilecache.bcf
function get_Amcache.hve(){
    makegreen "Saving Amcache.hve and Recentfilecache.bcf"
    echo "#### AMCACHE.HVE AND RECENTFILECACHE.BCF ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    # Get Amcache.hve
    find $windir/[a,A]*/[P,p]* -maxdepth 1 -type f -iname "Amcache.hve" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    # Get recentfilecache.bcf
    find $windir/[a,A]*/[P,p]* -maxdepth 1 -type f -iname "Recentfilecache.bcf" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy metadata files($I*.*) from Windows Recycle.bin
function get_Recycle.Bin(){
    makegreen "Copying RECYCLE BIN"
    echo "#### RECYCLEBIN $I ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find "\$Recycle.Bin" -type f -iname "*\$I*" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}
#Copy WebcacheV01.dat files
function get_webcachev(){
    makegreen "Saving WebcacheV01.dat"
    echo "#### MICROSOFT WEB BROWSER DB (WEBCACHEV01.DAT) ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $user_dir/*/AppData/Local/Microsoft/Windows/WebCache -maxdepth 2 -type f -iname "Webcach*.dat" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T -  |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Skype main.db files
function get_skype(){
    makegreen "Saving Skype"
    echo "#### SKYPE HISTORY ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $user_dir/*/AppData/Roaming/Skype/*/ -maxdepth 2 -type f -iname "main.db" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T -  |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy OBJECTS.DATA and *.mof files
function get_WMI_info(){
    # Get OBJECTS.DATA file
    makegreen "Saving OBJECTS.DATA and Mof files"
    echo "#### OBJECTS.DATA AND MOF ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $winsysdir/[W,w][B,b][E,e][M,m] -maxdepth 2 -type f  -iname "OBJECTS.DATA" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    # Get all Mof files
    find $winsysdir/[W,w][B,b][E,e][M,m]/*/ -maxdepth 2 -type f -iname "*.mof" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy SRU.dat
function get_srudb(){
    cd $mount_dir
    makegreen "Saving SRUDB.DAT"
    echo "#### SRUDB.DAT ####" >> $case_dir/Acquisition.log.txt
    find $winsysdir/[S,s][R,r][U,u]/ -maxdepth 1 -mindepth 1 -type f -iname "srudb.dat" 2>/dev/null -print0|\
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy ActivitiesCache.db
function get_ActivitiesCache(){
    cd $mount_dir
    makegreen "Saving ActivitiesCache.db"
    echo "#### ActivitiesCache.db ####" >> $case_dir/Acquisition.log.txt
    find $user_dir/*/AppData/Local/ConnectedDevicesPlatform/ -maxdepth 1 -mindepth 1 -type f -iname "ActivitiesCache.db" 2>/dev/null -print0|\
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}


#Copy Setupapi logs
function get_setupapi(){
    cd $mount_dir
    makegreen "Saving Setupapi.dev.log"
    echo "#### SETUPAPI LOG FILES ####" >> $case_dir/Acquisition.log.txt
    find $windir/[I,i][N,n][F,f] -type f -iname "setupapi*log" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Scheduled Tasks
function get_scheduled_tasks(){
    makegreen "Saving Scheduled Tasks List"
    echo "#### SCHEDULED TASKS ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    #Tasks dir in Windows directory
    find $windir/[t,T]asks -type f 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    #Tasks dir in Windows/System32 directories
    find $winsysdir/[t,T]asks -type f 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
}

#Copy Windows log files
function get_logfiles(){
    makegreen "Saving Windows Log Files" && \
    echo "#### WINDOWS LOGFILES ####" >> $case_dir/Acquisition.log.txt
    find -maxdepth 1 -type d  -iname "inetpub" 2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    find $winsysdir -maxdepth 2 -type d -iname "LogFiles" -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Chrome metadata
function get_chrome(){
     makegreen "Copying CHROME Metadata"
    echo "#### CHROME ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $user_dir/*/AppData/Local/Google/Chrome/User\ Data/Default -maxdepth 2 -type f \
    \( -name "History" -o -name "Bookmarks" -o -name "Cookies" -o -name "Favicons" -o -name "Web\ Data" \
    -o -name "Login\ Data" -o -name "Top\ Sites" -o -name "Current\ *" -o -name "Last\ *" \)  2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}

#Copy Firefox Metadata
function get_firefox(){
    makegreen "Copying FIREFOX Metadata"
    echo "#### FIREFOX ####" >> $case_dir/Acquisition.log.txt
    cd $mount_dir
    find $user_dir/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/ -maxdepth 2 -type f \
    \( -name "*.sqlite" -o -name "logins.json" -o -name "sessionstore.jsonlz4" \)  2>/dev/null -print0| \
    tar -rvf  $case_dir/$comp_name-acquisition.tar --null -T - |tee -a $case_dir/Acquisition.log.txt
    echo ""
}
########END DATA ACQUISITION FUNCTIONS######

######### PROCESSING FUNCTIONS##############
#Read registry hives and merge transaction logs for dirty hives
function repair_hives(){
  find $mount_dir/$winsysdir/$regdir -maxdepth 1 -type f 2>/dev/null | grep -Eio "software$"\|"system$"\|"sam$"\|"security$" | \
  while read d;
  do
    makegreen "Yarp + registryFlush -> reading $d"
    /envs/dfir/bin/python3 /usr/local/src/Silv3rhorn/registryFlush.py -f $mount_dir/$winsysdir/$regdir/$d -o $triage_dir/Registry/yarp-registryflush.py
    find $triage_dir/Registry/yarp-registryflush.py/$d* -type f 2>/dev/null && echo "$d is Dirty, logs -> merged" |tee -a $triage_dir/Registry/yarp-registryflush.py/Hive-State-$comp_name.txt
    find $triage_dir/Registry/yarp-registryflush.py/$d* -type f 2>/dev/null || echo "$d is Clean" |tee -a $triage_dir/Registry/yarp-registryflush.py/Hive-State-$comp_name.txt
  done
  find "$mount_dir/$user_dir/" -maxdepth 2 ! -type l|grep -i ntuser.dat$ |while read ntuser_path;
    do
      user_name=$( echo "$ntuser_path"|sed 's/\/$//'|awk -F"/" '{print $(NF-1)}')
      mkdir -p $triage_dir/Registry/yarp-registryflush.py/"$user_name"
      cd $mount_dir/$user_dir/"$user_name"
      makegreen "Yarp + registryFlush -> reading "$user_name"/NTUSER.DAT"
      /envs/dfir/bin/python3 /usr/local/src/Silv3rhorn/registryFlush.py -f "$ntuser_path" -o $triage_dir/Registry/yarp-registryflush.py/"$user_name"
      find $triage_dir/Registry/yarp-registryflush.py/${user_name}/${user_name}* -type f 2>/dev/null && echo ${user_name} " is dirty logs -> merged" |tee -a $triage_dir/Registry/yarp-registryflush.py/Hive-State-$comp_name.txt
      find $triage_dir/Registry/yarp-registryflush.py/${user_name}/${user_name}* -type f 2>/dev/null || echo ${user_name}"/NTUSER.DAT is Clean" |tee -a $triage_dir/Registry/yarp-registryflush.py/Hive-State-$comp_name.txt
      sleep .5
    done
}

#Run select RegRipper plugins on Software Registry
function regrip_software(){
    cd $case_dir
    makegreen "Running select RegRipper plugins on the Software Registry Hive(s)"
    sleep 1
    rip.pl -r $software_hive -p winver |tee -a $triage_dir/Registry/Regripper/System_Info/Windows_Version_Info-$comp_name.txt;
    rip.pl -r $software_hive -p lastloggedon |tee -a $triage_dir/Registry/Regripper/Account_Info/Last-Logged-On-$comp_name.txt;
    rip.pl -r $software_hive -p networklist 2>/dev/null |tee -a $triage_dir/Registry/Regripper/System_Info/Network/Network-List-$comp_name.txt;
    rip.pl -r $software_hive -p profilelist 2>/dev/null |tee -a $triage_dir/Registry/Regripper/Account_Info/User-Profiles-$comp_name.txt;
    rip.pl -r $software_hive -p pslogging 2>/dev/null |tee -a $triage_dir/Registry/Regripper/Settings/Powershell-logging-$comp_name.txt;
    rip.pl -r $software_hive -p clsid 2>/dev/null |tee -a $triage_dir/Registry/Regripper/Settings/Clsid-logging-$comp_name.txt;
    rip.pl -r $software_hive -p portdev |tee -a $triage_dir/USB/USB_Device_List-$comp_name.txt;
    rip.pl -r $software_hive -p runonceex |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/Run_Keys/Run-Once-$comp_name.txt;
    rip.pl -r $software_hive -p appcertdlls |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/Settings/Appcertsdlls-$comp_name.txt;
    rip.pl -r $software_hive -p appinitdlls |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/Settings/AppInitdlls-$comp_name.txt;
    rip.pl -r $software_hive -p dcom |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/Settings/ports-$comp_name.txt;
    rip.pl -r $software_hive -p psscript |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/Settings/Powershell-Script-$comp_name.txt;
    rip.pl -r $software_hive -p listsoft |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/System_Info/Software/Software-Installed-$comp_name.txt;
    rip.pl -r $software_hive -p msis |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/System_Info/Software/Msiexec-Installs-$comp_name.txt;
    rip.pl -r $software_hive -p uninstall |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/System_Info/Software/Add-Remove-Programs-$comp_name.txt;
    rip.pl -r $software_hive -p netsh |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/Settings/Netsh-$comp_name.txt;
    rip.pl -r $software_hive -p srum |grep -va "^$"|tee -a $triage_dir/SRUDB.dat/Regripper-srum-$comp_name.txt;
    rip.pl -r $software_hive -p run |grep -va "^$"|tee -a $triage_dir/Registry/Regripper/Run_Keys/Autorun-SOFTWARE-$comp_name.txt;
    rip.pl -r $software_hive -p defender |tee -a $triage_dir/Registry/Regripper/Settings/Defender-$comp_name.txt;
    rip.pl -r $software_hive -p disablemru |tee -a $triage_dir/Registry/Regripper/Settings/DisableMRU-$comp_name.txt;
    rip.pl -r $software_hive -f software | tee -a $triage_dir/Registry/Regripper/SOFTWARE-$comp_name.txt;
    rip.pl -aT -r $software_hive |sed "s/|||/|${comp_name}|${user_name}|/" >> $tempfile
    rip.pl -r $software_hive -p tasks |tee -a $triage_dir/ScheduledTasks/Regripper-Tasks-$comp_name.txt
    rip.pl -r $software_hive -p taskcache |tee -a $triage_dir/ScheduledTasks/Regripper-TaskCache-$comp_name.txt
}

#Run select RegRipper plugins on the System Registry
function rip_system(){
    cd $case_dir
    makegreen "Running select RegRipper plugins on the System Registry Hive(s)"
    sleep 1
    rip.pl -r $system_hive -p compname 2>/dev/null |tee -a $triage_dir/Registry/Regripper/System_Info/Computer-Name-$comp_name.txt;
    rip.pl -r $system_hive -p nic2 2>/dev/null |tee -a $triage_dir/Registry/Regripper/System_Info/Network/Last-Networks-$comp_name.txt;
    rip.pl -r $system_hive -p shares 2>/dev/null|tee -a $triage_dir/Registry/Regripper/System_Info/Network/Network-Shares-$comp_name.txt;
    rip.pl -r $system_hive -p shimcache |tee -a $triage_dir/Registry/Regripper/Program_Execution/Shimcache-$comp_name.txt;
    rip.pl -r $system_hive -p usbstor |tee -a $triage_dir/USB/USBStor-$comp_name.txt;
    rip.pl -r $system_hive -p usbdevices |tee -a $triage_dir/USB//USBStor-$comp_name.txt;
    rip.pl -r $system_hive -p backuprestore |tee -a $triage_dir/Registry/Regripper/Settings/Not-In-VSS-$comp_name.txt;
    rip.pl -r $system_hive -p ntds |tee -a $triage_dir/Registry/Regripper/Settings/ntds-$comp_name.txt;
    rip.pl -r $system_hive -p devclass |tee -a $triage_dir/USB//USBdesc-$comp_name.txt;
    rip.pl -r $system_hive -p lsa |tee -a $triage_dir/Registry/Regripper/Settings/Lsa-$comp_name.txt;
    rip.pl -r $system_hive -p disableremotescm |tee -a $triage_dir/Registry/Regripper/Settings/disableremote-sc.exe-$comp_name.txt;
    rip.pl -r $system_hive -p rdpport |tee -a $triage_dir/Registry/Regripper/Settings/RDP-Port-$comp_name.txt;
    rip.pl -r $system_hive -p remoteaccess |tee -a $triage_dir/Registry/Regripper/Settings/Remote-Access-Lockout-$comp_name.txt;
    rip.pl -r $system_hive -p routes |tee -a $triage_dir/Registry/Regripper/System_Info/Network/Routes-$comp_name.txt;
    rip.pl -aT -r $d |sed "s/|||/|${comp_name}|${user_name}|/" >> $tempfile
    rip.pl -r $system_hive -f system |tee -a $triage_dir/Registry/Regripper/SYSTEM-$comp_name.txt;
}

#Run select RegRipper plugins on the Security Registry
function rip_security(){
    cd $case_dir
    makegreen "Running select RegRipper plugins on the Security Registry Hive(s)"
    sleep 1
    rip.pl -a -r $security_hive |tee -a $triage_dir/Registry/Regripper/Settings/Audit-Policy-$comp_name.txt;
    rip.pl -aT -r $security_hive |sed "s/|||/|${comp_name}|${user_name}|/" >> $tempfile
    rip.pl -r $security_hive -f security | tee -a $triage_dir/Registry/Regripper/SECURITY-$comp_name.txt;
}

#Run all RegRipper plugins on NTUSER.DAT and Usrclass.dat
function regrip_ntuser_usrclass(){
    find "/$mount_dir/$user_dir/" -maxdepth 2 ! -type l|grep -i ntuser.dat$ |while read ntuser_path;
    do
      user_name=$( echo "$ntuser_path"|sed 's/\/$//'|awk -F"/" '{print $(NF-1)}')
      usrclass_file=$(find /$mount_dir/$user_dir/"$user_name"/[aA]*[aA]/[lL]*[lL]/[mM][iI]*[tT]/[wW]*[sS] -maxdepth 3 -type f 2>/dev/null|grep -i -m1 "\/usrclass.dat$")
      rip.pl -r "$ntuser_path" -a |tee -a "$triage_dir/Registry/Regripper/USERS/$comp_name-$user_name-NTUSER.txt"
      rip.pl -aT -r "$ntuser_path" |sed "s/|||/|${comp_name}|${user_name}|/" >> $tempfile
      rip.pl -f usrclass -r "$usrclass_file" -a |tee -a "$triage_dir/Registry/Regripper/USERS/$comp_name-$user_name-USRCLASS.txt"
      rip.pl -aT -r "$usrclass_file" |sed "s/|||/|${comp_name}|${user_name}|/" >> $tempfile
    done
}

#Run Select Regripper plugins on NTUSER.DAT
function regrip_user_plugins(){
    makegreen "Searching for NTUSER.DAT KEYS (Regripper)"
    sleep 1
    cd $mount_dir/$user_dir/
    find "/$mount_dir/$user_dir/" -maxdepth 2 ! -type l|grep -i ntuser.dat$ |while read ntuser_path;
    do
      user_name=$( echo "$ntuser_path"|sed 's/\/$//'|awk -F"/" '{print $(NF-1)}')
      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Program_Execution/UserAssist-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p userassist |tee -a "$triage_dir/Registry/Regripper/Program_Execution/UserAssist-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/File_Access/RecentDocuments-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p recentdocs |tee -a "$triage_dir/Registry/Regripper/File_Access/RecentDocuments-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Run_Keys/Run-MRU-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p runmru |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/Run_Keys/Run-MRU-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/File_Access/opened-saved-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p comdlg32 |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/File_Access/opened-saved-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/User_Searches/Wordwheel-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p wordwheelquery |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/User_Searches/Wordwheel-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/User_Searches/Typedpaths-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p typedpaths |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/User_Searches/Typedpaths-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/User_Searches/Typedurls-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p typedurls |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/User_Searches/Typedurls-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/User_Searches/Typedurlstime-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p typedurlstime |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/User_Searches/Typedurlstime-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Run_Keys/User_Run-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p run |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/Run_Keys/User_Run-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Settings/Compatibility_Flags-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p appcompatflags |grep -va "^$"|tee -a  "$triage_dir/Registry/Regripper/Settings/Compatibility_Flags-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Account_Info/Logons-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p logonstats |grep -va "^$"|tee -a  "$triage_dir/Registry/Regripper/Account_Info/Logons-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Program_Execution/Jumplist-Reg-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p jumplistdata |grep -va "^$"|tee -a  "$triage_dir/Registry/Regripper/Program_Execution/Jumplist-Reg-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/File_Access/Mount-Points-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p mp2 |grep -va "^$"|tee -a  "$triage_dir/Registry/Regripper/File_Access/Mount-Points-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/File_Access/Office-cache-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p oisc |grep -va "^$"|tee -a  "$triage_dir/Registry/Regripper/File_Access/Office-cache-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Account_Info/Environmental-Variables-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p profiler |grep -va "^$"|tee -a "$triage_dir/Registry/Regripper/Account_Info/Environmental-Variables-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Registry/Regripper/Run_Keys/Load-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p load |grep -va "^$"|tee -a  "$triage_dir/Registry/Regripper/Run_Keys/Load-$comp_name.txt"

      echo "######  "$user_name"  ######" |tee -a "$triage_dir/Alert/NTUSER-$comp_name.txt"
      rip.pl -r "$ntuser_path" -p rlo |grep -va "^$"|tee -a "$triage_dir/Alert/Regripper-RLO-Check-$comp_name.txt"
    done
}

#Run RegRipper on SAM Registry hive
function regrip_sam(){
    cd $mount_dir
    makegreen "Searching for SAM (Regripper)"
    sleep 1
    find $mount_dir/$winsysdir/$regdir -maxdepth 1 -type f 2>/dev/null | grep -i "\/sam$"| while read d;
    do
      rip.pl -r "$d" -a |tee -a $triage_dir/Registry/Regripper/SAM-$comp_name.txt;
    done
    find $mount_dir/$winsysdir/$regdir -maxdepth 1 -type f 2>/dev/null | grep -i "\/sam$" | while read d;
    do
      rip.pl -aT -r $d |sed "s/|||/|${comp_name}||/" >> $tempfile
    done
}

#Run RegRipper on AmCache.hve
function regrip_amcache.hve(){
    makegreen "Extracting Any RecentFileCache/AmCache (Regripper)"
    

    [ "$amcache_hive" ] && \
    rip.pl -d -r "$d" |grep "Hive is not dirty" && \
    echo AMCACHE Hive is Clean |tee -a $triage_dir/Registry/yarp-registryflush.py/Hive-State-$comp_name.txt||\
    echo AMCACHE Hive is Dirty |tee -a $triage_dir/Registry/yarp-registryflush.py/Hive-State-$comp_name.txt;
    rip.pl -aT -r "$amcache_hive" |sed "s/|||/|${comp_name}|${user_name}|/"| tee -a $tempfile
    rip.pl -r "$amcache_hive" -p amcache |tee -a "$triage_dir/Registry/Regripper/Program_Execution/Amcache-$comp_name.txt"
}

# Dump offline hashes and LSA secrets
function secrets_dump(){
  makegreen "Dumping Hashes and LSA Secrets (secrets_dump.py)"
  /envs/dfir/bin/python /usr/share/doc/python3-impacket/examples/secretsdump.py -sam $sam_hive -system $system_hive -security $security_hive local | tee $triage_dir/Registry/Impacket/secrets_dump-$comp_name.txt
}

# Timeline registry
function timeline_registry(){
  [ "$opt" == "4" ] || Timeline="Timeline"
  makegreen "Timelining Registry (timeline.py)"
  for hive in "${registry_hives[@]}";
  do
    /envs/dfir/bin/python /usr/local/src/Python-Registry/samples/timeline.py $hive |sed 's/^\(.\{19\}\).\{8\}/\1,/'| \
    awk -F',' '{print $1",REG,,,"$2}'|sed "s/,,,/,${comp_name},${user_name},/" | tee -a $timeline_dir/Registry-timeline.py-$comp_name.txt 
  done
  cd $mount_dir/$user_dir/
  find "/$mount_dir/$user_dir/" -maxdepth 2 ! -type l|grep -i ntuser.dat$ |while read ntuser_path;
    do
      user_name=$( echo "$ntuser_path"|sed 's/\/$//'|awk -F"/" '{print $(NF-1)}')
      /envs/dfir/bin/python /usr/local/src/Python-Registry/samples/timeline.py $ntuser_path |sed 's/^\(.\{19\}\).\{8\}/\1,/'| \
      awk -F',' '{print $1",REG,,,"$2}'|sed "s/,,,/,${comp_name},${user_name},/" | tee -a $timeline_dir/Registry-timeline.py-$comp_name.txt 
    done
}

function del_no_result(){
  cd $case_dir
  grep -RL ".:." $triage_dir |while read d;
  do
    rm $d
  done
}

function JLParser(){
    cd $mount_dir
    makegreen "Running JLParse.py extracting LNKS and Jumplists to json"
    /envs/dfir/bin/python3 /opt/app/JumpList_Lnk_Parser/JLParser.py -p -a /opt/app/JumpList_Lnk_Parser/JLParser_AppID.csv -d $user_dir -o $triage_dir/LNK/JumpList_Lnk_Parser-$comp_name.json
    sleep 1

    /usr/local/src/dfir-scripts/WinEventLogs/jq/JLParser-stats.sh $triage_dir/LNK/JumpList_Lnk_Parser-$comp_name.json |tee -a $triage_dir/LNK/JL-stats-$comp_name.txt
}

function lnkinfo(){
 cd $mount_dir
  find $mount_dir/$user_dir/*/ -type f|grep lnk$ | while read d;
  do
    echo $d && \
    /usr/bin/lnkinfo -v "$d"  |tee -a $triage_dir/LNK/lnkinfo-$comp_name.txt
  done
}


#Timeline recycle.bin metadata
function recbin2tln(){
    cd $mount_dir
    makegreen "Parsing \$Recycle.Bin"
    find $mount_dir/\$* -type f 2>/dev/null|grep "\$I"|sed 's|^\.||'|while read d;
    do
      ls $d
      sid=$(echo $d |sed 's|^\.||'|sed 's/^.*recycle.bin\///I'|awk -F'/' '{print $1}')
      name=$(strings -el -f $d)
      hexsize=$(cat "$d"|xxd -s8 -l8 -ps| sed -e 's/[0]*$//g')
      size=$(echo $((0x$hexsize)))
      hexdate0=$(cat "$d"|xxd -ps -s16 -l8 |grep -o .. |tac| tr -d '\n')
      #hexdate0=$(cat "$d"|xxd -s16 -l8 -ps|awk '{gsub(/.{2}/,"& ")}1'|awk '{for(i=NF; i>0;i--)printf "%s",$i}' && echo "")
      epoch=$(echo $((0x$hexdate0/10000000-11644473600)))
      #epoch=$(echo $(($hexdate1-11644473600)))
      date=$(date -d @$epoch +"%Y-%m-%d %H:%M:%S")
      echo "$epoch|Recycle|"$comp_name"||[Deleted] "$name " FILE SIZE: "$size| tee -a  >> $tempfile
      echo "$date,Recycle,"$comp_name",,[Deleted] "$name " FILE SIZE: "$size| tee -a $triage_dir/Deleted_Files/Recycled-$comp_name.csv
      echo "hexdateraw" $hexdate0
    done
}

#Timeline Chrome metadata
function chrome2tln(){
    makegreen "Extracting Any CHROME HISTORY and DOWNLOADS (sqlite3)"
    cd $mount_dir
    find $user_dir/*/AppData/Local/Google/Chrome/User\ Data/Default -maxdepth 0 -type d 2>/dev/null|while read d;
    do
      echo $d
      user_name=$(echo "$d"|sed 's/\/AppData.*//'|sed 's/^.*\///')
      makegreen "Searching for CHROME HISTORY and DOWNLOADS (sqlite3)"


      #Extract Chrome Browsing history
      cd $mount_dir
      [ "$d/History" != "" ] && \
      sqlite3 "$d/History" "select datetime(last_visit_time/1000000-11644473600, 'unixepoch'),url, title, visit_count from urls ORDER BY last_visit_time" | \
      awk -F'|' '{print $1",chrome,,,[URL]:"$2",TITLE: "$3", VISIT COUNT:"$4}'| \
      sed "s/,,,/,${comp_name},${user_name},/" | tee -a "$triage_dir/Browser_Activity/$user_name-Chrome-History-$comp_name.csv"

      # Extract Chrome Downloads
      [ "$d" != "" ] && \
      sqlite3 "$d/History" "select datetime(start_time/1000000-11644473600, 'unixepoch'), url, target_path, total_bytes FROM downloads INNER JOIN downloads_url_chains ON downloads_url_chains.id = downloads.id ORDER BY start_time" | \
      awk -F'|' '{print $1",chrome,,,[DOWNLOAD]-"$2",TARGET:-"$3", BYTES TRANSFERRED:-"$4}' | \
      sed "s/,,,/,${comp_name},${user_name},/" | tee -a "$triage_dir/Browser_Activity/$user_name-Chrome-Download-$comp_name.csv"

      #Extract Chrome cookies
      [ "$d" != "" ] && \
      sqlite3 "$d/Cookies" "select datetime(cookies.creation_utc/1000000-11644473600, 'unixepoch'), cookies.host_key,cookies.path, cookies.name, datetime(cookies.last_access_utc/1000000-11644473600,'unixepoch','utc'), cookies.value FROM cookies"| \
      awk -F'|' '{print $1",chrome,,,[Cookie Created]:"$2" LASTACCESS: "$5" VALUE: "$4}'| \
      sed "s/,,,/,${comp_name},${user_name},/" | tee -a "$triage_dir/Browser_Activity/$user_name-Chrome-Cookies-$comp_name.csv"

      #Extract Chrome Login Data
      [ "$d" != "" ] && \
      sqlite3 "$d/Login Data" "select datetime(date_created/1000000-11644473600, 'unixepoch'),  origin_url,username_value,signon_realm FROM logins"| \
      awk -F'|' '{print $1",chrome,,,[Login Data]:SITE_ORIGIN:"$2" USER_NAME: "$3" SIGNON_REALM "$4}' |\
      sed "s/,,,/,${comp_name},${user_name},/" | tee -a "$triage_dir/Browser_Activity/$user_name-Chrome-LoginData-$comp_name.csv"
      #Extract Chrome Web Data
      [ "$d" != "" ] && \
      sqlite3 "$d/Web Data" "select datetime(date_last_used, 'unixepoch'), name,value, count, datetime(date_created, 'unixepoch') from autofill"|\
      awk -F'|' '{print $1",chrome,,,[WebData] CREATED:"$5" NAME:"$2" VALUE:"$3" COUNT:"$4}'| \
      sed "s/,,,/,${comp_name},${user_name},/" |tee -a "$triage_dir/Browser_Activity/$user_name-Chrome-WebData-$comp_name.csv"

      #Extract Chrome Bookmarks
      [ "$d" != "" ] && \
      cat "$d/Bookmarks" |jq -r '.roots[]|recurse(.children[]?)|select(.type != "folder")|{date_added,name,url}|join("|")'|\
      awk -F'|' '{print int($1/1000000-11644473600)"|"$2"|"$3}'| \
      awk -F'|' '{$1=strftime("%Y-%m-%d %H:%M:%S",$1)}{print $1",Chrome,,,[Bookmark Created] NAME:"$2" URL:"$3}' |\
      sed "s/,,,/,${comp_name},${user_name},/" | tee -a "$triage_dir/Browser_Activity/$user_name-Chrome-Bookmarks-$comp_name.csv"
   done
    # Copy Files to Timeline Temp File
    find $triage_dir/Browser_Activity/ -type f |grep Chrome |while read d;
    do
      cat "$d"|while read line;
      do 
        timestamp=$(echo $line| awk -F',' '{print $1}'| grep -E '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]')
        [ "$timestamp" != "" ] && tlntime=$(date -d "$timestamp"  +"%s" 2>/dev/null)
        [ "$tlntime" != "" ] && tlninfo=$(echo "$f"| awk -F',' '{print "|"$2"|"$3"|"$4"|"$5}')
        tlninfo=$(echo "$line"| awk -F',' '{print "|"$2"|"$3"|"$4"|"$5}')
        echo $tlntime$tlninfo | tee -a $tempfile
        read -n1 -r -p "Press any key to continue..." key
      done
    done
   # Run Hindsight on Users Directory
   makegreen "Running Hindsight on $user_dir"
   mkdir -p $triage_dir/Browser_Activity/tmp
   cd $mount_dir
   /envs/dfir/bin/python3 /usr/local/src/Hindsight/hindsight.py   -i "$user_dir" -o "$triage_dir/Browser_Activity/Hindsight-$comp_name" -l "$triage_dir/Browser_Activity/hindsight.log" --temp_dir $triage_dir/Browser_Activity/tmp
}

#Timeline Firefox metadata
function firefox2tln(){
    makegreen "Extracting Any Firefox HISTORY, DOWNLOADS and COOKIES (sqlite3)"
    cd $mount_dir
    find $user_dir/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/ -maxdepth 0 -type d 2>/dev/null|while read d;
    do
      user_name=$(echo "$d"|sed 's/\/AppData.*//'|sed 's/^.*\///')
      #Extract FireFox Browsing history (places.sqlite)
      [ -e "$d/places.sqlite" ] && \
      sqlite3 file:"$d/places.sqlite" "select (moz_historyvisits.visit_date/1000000), moz_places.url, moz_places.title, moz_places.visit_count FROM moz_places,moz_historyvisits where moz_historyvisits.place_id=moz_places.id order by moz_historyvisits.visit_date;" |\
      awk -F'|' '{print $1"|FireFox|||[URL]:"$2"  TITLE:"$3" VISIT-COUNT:" $4}'| sed "s/|||/|${comp_name}|${user_name}|/" |\
      tee -a "$triage_dir/Browser_Activity/$user_name-FireFox-History-$comp_name.csv"

      # Extract FireFox Downloads
      [ -e "downloads.sqlite" ] && \
      sqlite3 file:"$d/places.sqlite" "select (startTime/1000000), source,target,currBytes,maxBytes FROM moz_downloads" |awk -F'|' '{print $1"|FireFox|||[Download]:"$2"=>"$3" BYTES DOWNLOADED=>"$4" TOTAL BYTES=>"$5}' | sed "s/|||/|${comp_name}|${user_name}|/" | \
      tee -a "$triage_dir/Browser_Activity/$user_name-FireFox-Downloads-$comp_name.csv"

      #Extract FireFox cookies
      [ -e "cookies.sqlite" ] && \
      sqlite3 file:"$d/cookies.sqlite" "select (creationTime/1000000), host,name,datetime((lastAccessed/1000000),'unixepoch','utc'),datetime((expiry/1000000),'unixepoch','utc') FROM moz_cookies" |\
      awk -F'|' '{print $1"|FireFox||| [Cookie Created]: "$2" NAME:"$3" ,LAST ACCESS:"$4", EXPIRY: "$5}'| \
      sed "s/|||/|${comp_name}|${user_name}|/" | \
      tee -a "$triage_dir/Browser_Activity/$user_name-FireFox-Cookies-$comp_name.csv"
    done
    # Copy Files to Timeline Temp File
    find $triage_dir/Browser_Activity/ -type d |grep "FireFox" 2>/dev/null| while read d;
    do
      echo "$d"| while read f;
        do
        timestamp=$(echo "$f"| awk -F',' '{print $1}'| grep -E '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]')
          [ "$timestamp" != "" ] && tlntime=$(date -d "$timestamp"  +"%s" 2>/dev/null)
          tlninfo=$(echo "$f"| awk -F',' '{print "|"$2"|"$3"|"$4"|"$5}')
          [ "$tlninfo" != "" ] && echo $tlntime$tlninfo |tee -a  >> $tempfile
        done
      done
}

function extract_webcacheV(){
    cd $mount_dir/$user_dir/
    makegreen "Extracting any IE WebcacheV0x.dat files (esedbexport)"
    find "$mount_dir/$user_dir/" -maxdepth 2 ! -type l|grep -i ntuser.dat$ |while read ntuser_path;
    do
      user_name=$( echo "$ntuser_path"|sed 's/\/$//'|awk -F"/" '{print $(NF-1)}')
      find /$mount_dir/$user_dir/$user_name/AppData/Local/Microsoft/Windows/WebCache -maxdepth 2 -type f -iname "WebcacheV*.dat" 2>/dev/null |while read d;
      do
        /usr/bin/esedbexport -t $triage_dir/Browser_Activity/esedbexport-Webcachev01.dat-$user_name-$comp_name "$d";
      done
      find $triage_dir/Browser_Activity/esedbexport-Webcachev01.dat-$user_name-$comp_name.export -type d 2>/dev/null| while read dir;
      do
        grep -hir Visited: $dir |awk '{ s = ""; for (i = 9; i <= NF; i++) s = s $i " "; print s }'|awk -v last=26 '{NF = last} 1'| \
        tee $triage_dir/Browser_Activity/grep-esedbexport-Webcachev01.dat-$user_name-$comp_name.csv
      done
    done
}

function extract_srudb(){
    makegreen "Extract srudb.dat file"
    find /$mount_dir/$winsysdir/[S,s][R,r][U,u] -maxdepth 2 -type f -iname "srudb.dat" 2>/dev/null |while read d;
    do
      /envs/dfir/bin/python3 /opt/app/srum-dump/srum_dump2.py --SRUM_INFILE "$d" --XLSX_OUTFILE $triage_dir/SRUDB.dat/srum_dump-$comp_name.xlsx -r $mount_dir/$winsysdir/$regdir/SOFTWARE -q -t /opt/app/srum-dump/SRUM_TEMPLATE2.xlsx
    done
}

function parse_current.mdb(){
    cd $mount_dir
    makegreen "Parse Current.mdb file"
    find /$mount_dir/$winsysdir/[L,l]*[S,s]/[S,s][U,u][M,m] -type f -iname "Current.mdb"| while read d;
    do
      /envs/dfir/bin/python3 /opt/app/KStrike/KStrike.py "$d" |tee -a $case_dir/Triage/Current.mdb/Kstrike-$comp_name.txt
    done
}

#Timeline Alternate Data Streams
function ADS_extract(){
    cd $mount_dir
    #  scan mounted NTFS disk Alternate Data Streams and Timestamps
    [ "$(getfattr -n ntfs.streams.list $mount_dir 2>/dev/null)" ]  && makegreen "Extracting Alternate Data Streams" &&\
    getfattr -Rn ntfs.streams.list . 2>/dev/null |\
    grep -ab1 -h ntfs.streams.list=|grep -a : |sed 's/.*ntfs.streams.list\="/:/g'|\
    sed 's/.*# file: //'|sed 's/"$//g'|paste -d "" - -|grep -v :$ | while read ADS_file;
    do
      base_file=$(echo "$ADS_file"|sed 's/:.*//')
      crtime=$(getfattr -h -e hex -n system.ntfs_times_be "$base_file" 2>/dev/null|grep "="|awk -F'=' '{print $2}'|grep -o '0x................')
      epoch_time=$(echo $(($crtime/10000000-11644473600)))
      [ $epoch_time ] || epoch_time="0000000000"
      MAC=$(stat --format=%y%x%z "$base_file" 2>/dev/null)
      [ "$ADS_file" ] && echo "$epoch_time|ADS|$comp_name||[ADS Created]: $ADS_file [MAC]: $MAC"|grep -va "ntfs.streams.list\="|tee -a $tempfile
    done
}

#Timeline Prefetch and extract metadata
function prefetch_extract(){
    cd $mount_dir
    makegreen "Searching for PREFETCH (prefetchruncounts.py)"
    sleep 1
    find /$mount_dir/$windir/[P,p]refetch -maxdepth 0 -type d |grep -m1 -i fetch$ | while read d;
    do
      /envs/dfir/bin/python3 /opt/app/dfir-scripts/python/prefetchruncounts.py "$d" | tee -a $triage_dir/Prefetch/prefetchruncounts-$comp_name.txt
      /envs/dfir/bin/python3 /opt/app/dfir-scripts/python/prefetchruncounts.py "$d" -t | tee /tmp/prc.txt
      sleep 1
      [ "/tmp/prc.txt" ] && cat /tmp/prc.txt |while read line;
      do
        timestamp=$(echo $line| awk -F',' '{print $1}'| grep -Eo '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]')
        [ "$timestamp" != "" ] && tlntime=$(date -d "$timestamp"  +"%s" 2>/dev/null)
        [ "$tlntime" != "" ] && tlninfo=$(echo $line| awk -F',' '{print "[Program Execution] PF_File:"$3" Executable:"$4" Run Count:"$2" Volumes"$5}')
        [ "$timestamp" != "" ] && echo $tlntime"|prefetch|"$comp_name"||"$tlninfo | tee -a $tempfile
      done
    done
}

#Timeline Windows Services
function winservices(){
    cd $mount_dir
    makegreen "Searching for windows Services (winservices.py)"
    sleep 1
    /envs/dfir/bin/python3 /opt/app/dfir-scripts/python/winservices.py $system_hive |tee -a $triage_dir/Services/winservices.py-$comp_name.csv;

    find $triage_dir/Services/ -type f |grep "winservices-" | while read d;
    do
      cat "$d" |while read f;
        do
          timestamp=$(echo "$f" awk -F',' '{print $1}'| grep -Eo '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]')
          tlntime=$(date -d "$timestamp"  +"%s" 2>/dev/null)
          tlninfo=$(echo "$f"| awk -F',' '{print "||[Service Last Write]: "$2","$3","$5","$7}')
          echo $tlntime"|Svc|"$comp_name$tlninfo |tee -a $tempfile
        done
    done
}


#Consolidating TLN Output and consolidating timelines
function consolidate_timeline(){
    makegreen "Consolidating TLN Files"
    echo ""
    cat $tempfile | sort -rn |uniq | tee -a | tee -a $timeline_dir/Triage-Timeline-$comp_name.TLN;
    cat $tempfile |awk -F'|' '{$1=strftime("%Y-%m-%d %H:%M:%S",$1)}{print $1","$2","$3","$4","$5}'|sort -rn | uniq| grep -va ",,,," |tee -a $timeline_dir/Triage-Timeline-$comp_name.csv
    cat $timeline_dir/Triage-Timeline-$comp_name.csv|grep -ia ",alert," |tee -a $triage_dir/Alert/RegRipperAlerts-$comp_name.csv
    cat $timeline_dir/Triage-Timeline-$comp_name.csv|grep Zone.Identifier| tee -a $triage_dir/Browser_Activity/Zone.Identifier-$comp_name.csv
    makegreen "Complete!"
}

#Get a copy of $MFT, WinEvents, Registry and Logs
makegreen "Copying Artifacts"
function cp_artifacts(){
    cd $mount_dir
    cp $mount_dir/\$MFT $artifact_dir
    rsync -aRq  "$winsysdir$regdir" "$artifact_dir"
    rsync -aRq  "$winsysdir$evtxdir" "$artifact_dir"     
    find $windir/[I,i][N,n][F,f] -type f -iname "setupapi*log"|while read d;
    do
      cp "$d" $triage_dir/USB/setupapi.dev.log-$comp_name.txt 2>/dev/null;
    done
    sudo find $windir/Logs -type f 2>/dev/null|grep -Evi \.etl$\|\.cab$ |sed 's|^\./||'|sed 's/ /\\ /g'|while read d;
    do 
      echo "\""$d"\"" && sudo rsync -aRq --include '*log' --exclude '*etl' """$d""" "$artifact_dir";done
    sudo find $winsysdir/Logs -type f 2>/dev/null|grep -vi etl$ |sed 's|^\./||'|sed 's/ /\\ /g'|while read d; 
    do 
      echo "\""$d"\"" && sudo rsync -aRq --include '*log' --exclude '*etl'  """$d""" "$artifact_dir";
    done
}

Run Jobparse.py and Extract Windows Event Log: TaskScheduler%4operational.evtx
function extract_Jobs(){
    cd $mount_dir
    makegreen "Searching for SCHEDULED TASKS (jobparser.py)"
    sleep 1
    find $windir -maxdepth 2 -type d 2>/dev/null  | grep -i '\/tasks$'|sed 's|^\./||'|while read d;
    do
      echo "######## $d ########" |tee -a $triage_dir/ScheduledTasks/jobsparser.py-$comp_name.txt
      python2 /usr/local/bin/jobparser.py -d "$d" |tee -a $triage_dir/ScheduledTasks/jobsparser.py-$comp_name.txt
    done
}

#Parse OBJECTS.DATA file
extract_objects_data(){
    cd $mount_dir
    makegreen "Searching for Object.data file (PyWMIPersistenceFinder.py, CCM-RecentApps.py)"
    sleep 1
    find $winsysdir -maxdepth 3 -type f 2>/dev/null  | grep -i '\/objects.data$'|sed 's|^\./||'|while read d;
    do
      python2 /usr/local/bin/CCM_RUA_Finder.py -i "$d" -o $triage_dir/OBJECTS.DATA/CCM-RUA_Finder-$comp_name.csv
      python2 /usr/local/bin/PyWMIPersistenceFinder.py "$d" |tee -a $triage_dir/OBJECTS.DATA/pyWMI-Persistence-Finder-$comp_name.csv
    done
}

#Parse Windows History File
extract_winactivities(){
    cd $mount_dir
    makegreen "Searching for ActivitiesCache.db"
    cd $mount_dir/$user_dir/
    find "$mount_dir/$user_dir/" -maxdepth 2 ! -type l|grep -i ntuser.dat$ |while read ntuser_path;
    do
      user_name=$( echo "$ntuser_path"|sed 's/\/$//'|awk -F"/" '{print $(NF-1)}')
      find "$mount_dir/$user_dir/$user_name/AppData/Local/ConnectedDevicesPlatform" -maxdepth 5 -type f 2>/dev/null | \
      grep -i "ActivitiesCache.db$"| sed 's|^\./||'|while read d;
      do
        sqlite3 "$d" ".read /opt/app/kacos2000/WindowsTimeline/WindowsTimeline.sql" | tee -a $triage_dir/ActivitiesCache/WindowsTimeline.sql-$user_name-$comp_name.csv
      done
    done
}

#Parse IE History File Index.dat
function parse_index.dat(){
    cd $mount_dir
    makegreen "Searching for any index.dat files"
    cd $mount_dir/$user_dir/
    find "$mount_dir/$user_dir/" -maxdepth 2 ! -type l|grep -i ntuser.dat$ |while read ntuser_path;
    do
      user_name=$( echo "$ntuser_path"|sed 's/\/$//'|awk -F"/" '{print $(NF-1)}')
      find "$mount_dir/$user_dir/$user_name/AppData" -size +5k -maxdepth 9 -type f 2>/dev/null | \
      grep -i \/index.dat$ | sed 's|^\./||'|while read d;
      do
        parseie.pl -t -s $comp_name -u $user_name -f "$d"| grep -Ev ietld\|iecompat >> $tempfile
        parseie.pl -t -s $comp_name -u $user_name -f "$d" | grep -Ev ietld\|iecompat |\
        awk -F'|' '{$1=strftime("%Y-%m-%d %H:%M:%S",$1)}{print $1","$2","$3","$4","$5}'| \
        tee -a $triage_dir/Browser_Activity/Index.dat-$user_name-$comp_name.csv
      done
    done
}

#Run Bits_Parser.py
function bits_parser(){
  /envs/dfir/bin/python /usr/local/src/BitsParser/BitsParser.py -i /mnt/image_mount/ProgramData/Microsoft/Network/Downloader/ --carvedb --carveall |tee -a $triage_dir/BITS/BitsParser.py-$comp_name.csv
}

# Extract WindowsEvent Logs
function extract_WinEVTX(){
    cd $mount_dir
    makegreen "Searching for windows Event Logs"
    sleep 1
    #Microsoft-Windows-TaskScheduler4Operational.evtx
    find $mount_dir/$winsysdir/$evtxdir -type f 2>/dev/null | grep -i \/Microsoft-Windows-TaskScheduler\%4Operational.evtx$| while read d;
    do
      /envs/dfir/bin/python3 /opt/app/dfir-scripts/WinEventLogs/parse_evtx_tasks.py  "$d" |tee -a $triage_dir/ScheduledTasks/parse_evtx_tasks.py-$comp_name.csv;
    done
    sleep 1
    cat $triage_dir/ScheduledTasks/parse_evtx_tasks.py-$comp_name.csv |grep -E \,100\,\|\,102\.\|\,106\, |while read d;
    do
      timestamp=$(echo $d| awk -F',' '{print $1}'| grep -Eo '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]')
      [ "$timestamp" != "" ] && tlntime=$(date -d "$timestamp"  +"%s" 2>/dev/null)
      evtxinfo=$(echo $d|awk -F"," '{$1=""}1')
      [ "$timestamp" != "" ] && echo $tlntime"|SchTask|"$comp_name"||"$evtxinfo >> $tempfile
    done
    #Microsoft-Windows-Bits-Client\%4Operational.evtx
    makegreen "Searching for BITS Transactions"
    find $mount_dir/$winsysdir/$evtxdir -type f 2>/dev/null | grep -i \/Microsoft-Windows-Bits-Client\%4Operational.evtx$| while read d;
    do
      /envs/dfir/bin/python3 /opt/app/dfir-scripts/WinEventLogs/parse_evtx_BITS.py "$d" |tee -a $triage_dir/BITS/parse_evtx_BITS.py-$comp_name.csv;
    done
    sleep 1
    cat $triage_dir/BITS/parse_evtx_BITS.py-$comp_name.csv |while read d;
    do
      timestamp=$(echo $d| awk -F',' '{print $1}'| grep -Eo '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]')
      [ "$timestamp" != "" ] && tlntime=$(date -d "$timestamp"  +"%s" 2>/dev/null)
      #evtxinfo=$(echo $d|cut -f 2- -d','|sed 's/,/;/g')
      evtxinfo=$(echo $d|awk -F"," '{$1=""}1')
      [ "$timestamp" != "" ] && echo $tlntime"|BITS|"$comp_name"||"$evtxinfo >> $tempfile
    done
    #Find RDP Connections
    makegreen "Searching for RDP Sessions"
    /envs/dfir/bin/python3 /opt/app/dfir-scripts/WinEventLogs/parse_evtx_RDP.py $mount_dir/$winsysdir/$evtxdir |tee -a $triage_dir/RDP/parse_evtx_RDP.py-$comp_name.csv;
    /usr/local/src/dfir-scripts/WinEventLogs/RDP_Diagram.sh -f $triage_dir/RDP/parse_evtx_RDP.py-$comp_name.csv -o $triage_dir/RDP/RDP_Diagram.sh-$comp_name.png
    cat $triage_dir/RDP/parse_evtx_RDP.py-$comp_name.csv|grep -E  \,21\,\|\,23\,\|\,24\,\|\,25\,\|\,1149\,\|\,98\,\|\,131\,\|\,140\,\|\,1102\|\,1105\,\|\,1029 |while read d;
      do
        timestamp=$(echo $d| awk -F',' '{print $1}'| grep -Eo '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]')
        [ "$timestamp" != "" ] && tlntime=$(date -d "$timestamp"  +"%s" 2>/dev/null)
        evtxinfo=$(echo $d|awk -F"," '{$1=""}1')
        [ "$timestamp" != "" ] && echo $tlntime"|RDP|"$comp_name"||"$evtxinfo >> $tempfile
    done
}

# Extract WindowsEvent Logs to jsonl
function evtxdump(){
    cd $mount_dir
    makegreen "Searching for windows Event Logs"
    sleep 1
    mkdir -p "$triage_dir/WindowsEventLogs/evtx_dump"
    find $mount_dir/$winsysdir/$evtxdir -type f 2>/dev/null -size +70k $evtx_max -name '*.evtx' | while read d;
    do
      evtx_file=$(basename "$d")
      makegreen "Processing Windows Event Log $evtx_file"
      evtx_dump "$d" -o jsonl -f "$triage_dir/WindowsEventLogs/evtx_dump/$evtx_file.jsonl"
      head "$triage_dir/WindowsEventLogs/evtx_dump/$evtx_file.jsonl"
    done
    find $triage_dir/WindowsEventLogs/evtx_dump/ -type f 2>/dev/null | \
    grep Microsoft-Windows-PowerShell%4Operational.evtx.jsonl| while read d;
    do
      cat "$d" |jq -j '.Event|select(.EventData.ScriptBlockText !=null)|.System.Computer,.System.TimeCreated."#attributes".SystemTime,.EventData.Path,.System.Security."#attributes".UserID,.EventData.ScriptBlockText,.System.Channel' | \
      tee -a $triage_dir/PowerShell/PowerShellScriptBlocks-$comp_name.txt
    done

    find $triage_dir/WindowsEventLogs/evtx_dump/ -type f 2>/dev/null | \
    grep Windows.PowerShell.evtx.jsonl| while read d;
    do
      cat "$d" | \
      jq  '.Event|select(.EventData.Data."#text"!=null)|.System.Computer,.System.TimeCreated."#attributes".SystemTime,.EventData.Data,.System.Channel'| \
      tee -a $triage_dir/PowerShell/PowerShell-HostApplication-$comp_name.txt
    done

    # Get IPv4 Addresses in EVTX files
    find $triage_dir/WindowsEventLogs/evtx_dump/ -type f | while read d;
    do
      echo $d | tee -a $triage_dir/WindowsEventLogs/IPv4-Addresses-in-evtx-$comp_name.txt
      grep -Eoa "\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b" """$d"""| \
      sort -u | grep -Ev ^0\|0\.0\.0\|^127\|^224\|^239 2>/dev/null |while read line;
      do
        a=$(geoiplookup $line 2>/dev/null|awk -F':' '{print $2}'|grep -vi "IP Address not found")
        echo $line $a  | tee -a $triage_dir/WindowsEventLogs/IPv4-Addresses-in-evtx-$comp_name.txt
      done
      echo "*********************************************************" |tee -a $triage_dir/WindowsEventLogs/IPv4-Addresses-in-evtx-$comp_name.txt
    done

    echo "EXTERNAL IP ADDRESS SUMMARY" |tee -a $triage_dir/WindowsEventLogs/IPv4-Addresses-in-evtx-$comp_name.txt
    cat  $triage_dir/WindowsEventLogs/IPv4-Addresses-in-evtx-$comp_name.txt | awk -F',' '{print $2}'| grep  -v '^$'|sort |uniq -c|sort -rn |\
    tee -a $triage_dir/WindowsEventLogs/IPv4-Addresses-in-evtx-$comp_name.txt

    # Get Statistics from Security.evtx
    find $triage_dir/WindowsEventLogs/evtx_dump/ -type f 2>/dev/null | \
    grep -i \/Security.evtx.jsonl| while read d;
    do
      echo "SECURITY.EVTX EVENT COUNT" |tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt
      /opt/app/dfir-scripts/WinEventLogs/jq/security.evtx.count.sh "$d" |tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt
      echo "*********************************************************
      "|tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt

      echo "SECURITY.EVTX LOGIN TYPES" |tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt
      /opt/app/dfir-scripts/WinEventLogs/jq/logintypescount.sh "$d" |tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt
      echo "*********************************************************
      "|tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt

      echo "SECURITY.EVTX NEW PROCESSES" |tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt
      /opt/app/dfir-scripts/WinEventLogs/jq/newprocesscount.sh "$d" |tee -a $triage_dir/WindowsEventLogs/Security.evtx-stats-$comp_name.txt

      echo "SECURITY.EVTX FAILED LOGINS" |tee -a $triage_dir/WindowsEventLogs/failed-logins-$comp_name.txt
      /opt/app/dfir-scripts/WinEventLogs/jq/failed_logins.sh  "$d" |tee -a $triage_dir/WindowsEventLogs/failed-logins-$comp_name.txt

      echo "SECURITY.EVTX EXPLICIT LOGINS EID4648" |tee -a $triage_dir/WindowsEventLogs/explicit-logins-$comp_name.txt
      /opt/app/dfir-scripts/WinEventLogs/jq/explicit_logins.sh  "$d" |tee -a $triage_dir/WindowsEventLogs/explicit-logins-$comp_name.txt
    done

    # Get Information from Task Scheduler
    find $triage_dir/WindowsEventLogs/evtx_dump/ -type f 2>/dev/null | \
    grep -i \/Microsoft-Windows-TaskScheduler\%4Operational.evtx.jsonl$| while read d;
    do
      echo "Scheduled Task Event Summary" |tee -a  $triage_dir/SheduledTasks/task-scheduler-info-$comp_name.txt
      /opt/app/dfir-scripts/WinEventLogs/jq/task-scheduler-summary.sh "$d" |tee -a $triage_dir/ScheduledTasks/task-scheduler-info-$comp_name.txt
      echo "*********************************************************"|tee -a  $triage_dir/ScheduledTasks/task-scheduler-info-$comp_name.txt
    done

}

function zircolite_evtx(){
    zpath="/opt/app/Zircolite"
    find  find $triage_dir/WindowsEventLogs/evtx_dump/ -type f 2>/dev/null | \
    grep -Ei sysmon.evtx.jsonl$\|\/Security.evtx.jsonl$\|\/Application.evtx.jsonl$\|\/System.evtx.jsonl$\|PowerShell\|Defender\|DNS\|Windows-Bits\|Windows-Smb\|TaskScheduler\|firewall| \
    while read d;
    do
      evtx_jsonl=$(echo "$d" |awk -F'dump/' '{print $NF}')
      /envs/dfir/bin/python3 $zpath/zircolite.py -j -e "$d" -r $zpath/rules/rules_windows_generic_full.json -c $zpath/config/fieldMappings.json --csv -o $triage_dir/Alert/Zircolite-"$evtx_jsonl".json -l $triage_dir/Alert/Zircolite-log-$comp_name.csv
    done
}

function scan_for_lolbas(){
    find $triage_dir -type f |grep -Ei jsonl$\|csv$\|txt$ |grep -Ev MFT\|TLN\|Clsid|while read d; 
	do 
	  /envs/dfir/bin/python3 /usr/local/src/dfir-scripts/WinEventLogs/scanforlolbas.py -p "$d" -l /usr/local/src/lolbas/lolbas.csv | \
	  grep -Ev \|FILE\|Shell32.dll.lnkinfo\|Triage-Timeline |tee -a $triage_dir/lolbas/lolbas-$comp_name.txt;done

}

#Extract MFT to body file and then to TLN and csv files
function analyze_mft(){
    cd $mount_dir
    makegreen "Analyzing \$MFT Standby..."
    [ -f "\$MFT" ] && \
    /envs/dfir/bin/analyzeMFT.py -p -f \$MFT --bodyfull --bodyfile=$triage_dir/MFT/analyzeMFT-$comp_name.body
    [ -f $triage_dir/MFT/analyzeMFT-$comp_name.body ] && bodyfile.pl -f $triage_dir/MFT/analyzeMFT-$comp_name.body -s $comp_name | \
    sort -rn |tee $timeline_dir/MFT-$comp_name.TLN.txt && \
    cat $timeline_dir/MFT-$comp_name.TLN.txt | awk -F'|' '{$1=strftime("%Y-%m-%d %H:%M:%S",$1)}{print $1","$2","$3","$4","$5}'| \
    tee -a $timeline_dir/MFT-$comp_name.csv
    mft_dump \$MFT -o jsonl -f $triage_dir/MFT/MFT_Dump-$comp_name.jsonl
    cat $timeline_dir/MFT-$comp_name.TLN.txt |while read d; do grep -E -i \.lnk$\|\.msi$\|\.exe$\|\.ps1$\|\.hta$\|\.tmp$\|\.rar$\|\.bat\|\.cmd$\|\.vbe$\|\.vbs$\|\.zip  >> $tempfile;done
}

#Extract $USNJRNL:$J to TLN
function parse_usn(){
    cd $mount_dir
    makegreen "Extracting \$USNJRNL:$J Standby..."
    [ -f "\$Extend/\$UsnJrnl:\$J" ] && \
    /envs/dfir/bin/usn.py -t -s $comp_name -f "\$Extend/\$UsnJrnl:\$J"  -o $triage_dir/USNJRNL/usn.py-$comp_name.TLN.txt
    cat $triage_dir/USNJRNL/usn.py-$comp_name.TLN.txt | awk -F'|' '{$1=strftime("%Y-%m-%d %H:%M:%S",$1)}{print $1","$2","$3","$4","$5}'| \
    tee -a $triage_dir/USNJRNL/usn.py-$comp_name.csv
}

clear
[ $(whoami) != "root" ] && makered "dfir-scripts Requires Root!" && exit
show_menu
exit 0
